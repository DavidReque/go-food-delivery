{
  "schemes": ["http", "https"],
  "swagger": "2.0",
  "info": {
    "description": "Catalogs Read-Service Api for product reading and searching with comprehensive endpoints",
    "title": "Catalogs Read-Service Api",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "name": "David Requeno",
      "url": "https://github.com/DavidReque",
      "email": "davidrequeno52@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0"
  },
  "host": "localhost:7001",
  "basePath": "/api/v1",
  "paths": {
    "/api/v1/products": {
      "get": {
        "description": "Get all products with pagination, filtering and sorting capabilities",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Products"],
        "summary": "Get all products",
        "parameters": [
          {
            "minimum": 1,
            "type": "integer",
            "default": 1,
            "description": "Page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 10,
            "description": "Page size",
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "example": "\"createdAt\"",
            "description": "Field to order by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "example": "\"field=name\u0026value=pizza\u0026comparison=contains\"",
            "description": "Applied filters",
            "name": "filters",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Products retrieved successfully",
            "schema": {
              "$ref": "#/definitions/dtos.GetProductsResponseDto"
            }
          },
          "206": {
            "description": "Partial content - Paginated results",
            "schema": {
              "$ref": "#/definitions/dtos.GetProductsResponseDto"
            }
          },
          "400": {
            "description": "Bad request - Invalid query parameters",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Not found - No products match the criteria",
            "schema": {
              "type": "object"
            }
          },
          "429": {
            "description": "Too many requests - Rate limit exceeded",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error - Something went wrong",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/products/search": {
      "get": {
        "description": "Search products by text with pagination and filtering capabilities",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Products"],
        "summary": "Search products",
        "parameters": [
          {
            "type": "string",
            "example": "\"pizza\"",
            "description": "Search text to find products",
            "name": "search",
            "in": "query"
          },
          {
            "minimum": 1,
            "type": "integer",
            "default": 1,
            "description": "Page number",
            "name": "page",
            "in": "query"
          },
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 10,
            "description": "Page size",
            "name": "size",
            "in": "query"
          },
          {
            "type": "string",
            "example": "\"name\"",
            "description": "Field to order by",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "string",
            "example": "\"field=category\u0026value=italian\u0026comparison=eq\"",
            "description": "Applied filters",
            "name": "filters",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Products found successfully",
            "schema": {
              "$ref": "#/definitions/dtos.SearchProductsResponseDto"
            }
          },
          "206": {
            "description": "Partial content - Paginated results",
            "schema": {
              "$ref": "#/definitions/dtos.SearchProductsResponseDto"
            }
          },
          "400": {
            "description": "Bad request - Invalid search parameters",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized - Missing or invalid authentication",
            "schema": {
              "type": "object"
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Not found - No products match the search criteria",
            "schema": {
              "type": "object"
            }
          },
          "429": {
            "description": "Too many requests - Rate limit exceeded",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error - Something went wrong",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/products/{id}": {
      "get": {
        "description": "Get detailed information about a specific product by its unique identifier",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Products"],
        "summary": "Get product by ID",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Product ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Product details retrieved successfully",
            "schema": {
              "$ref": "#/definitions/dtos.GetProductByIdResponseDto"
            }
          },
          "400": {
            "description": "Bad request - Invalid product ID format",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized - Authentication required",
            "schema": {
              "type": "object"
            }
          },
          "404": {
            "description": "Not found - Product not found",
            "schema": {
              "type": "object"
            }
          },
          "500": {
            "description": "Internal server error - Something went wrong",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "dto.ProductDto": {
      "type": "object",
      "properties": {
        "createdAt": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "price": {
          "type": "number"
        },
        "productId": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        }
      }
    },
    "dtos.GetProductByIdResponseDto": {
      "type": "object",
      "properties": {
        "product": {
          "$ref": "#/definitions/dto.ProductDto"
        }
      }
    },
    "dtos.GetProductsResponseDto": {
      "description": "DTO for response to get products with pagination and comprehensive product list",
      "type": "object",
      "properties": {
        "products": {
          "description": "@Description Paginated list of products with metadata",
          "allOf": [
            {
              "$ref": "#/definitions/dtos.ProductsListResult"
            }
          ]
        }
      }
    },
    "dtos.ProductsListResult": {
      "description": "Paginated result for products with navigation and summary information",
      "type": "object",
      "properties": {
        "items": {
          "description": "@Description List of products for the current page with full details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/dto.ProductDto"
          }
        },
        "page": {
          "description": "@Description Current page number for navigation\n@Example 1",
          "type": "integer"
        },
        "size": {
          "description": "@Description Number of products displayed on the current page\n@Example 10",
          "type": "integer"
        },
        "totalItems": {
          "description": "@Description Total number of products available across all pages\n@Example 150",
          "type": "integer"
        },
        "totalPage": {
          "description": "@Description Total number of pages available for navigation\n@Example 15",
          "type": "integer"
        }
      }
    },
    "dtos.SearchProductsResponseDto": {
      "description": "DTO for response to search products with pagination and search results",
      "type": "object",
      "properties": {
        "products": {
          "description": "@Description Paginated list of search results with metadata",
          "allOf": [
            {
              "$ref": "#/definitions/dtos.ProductsListResult"
            }
          ]
        }
      }
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "description": "Enter \"Bearer\" followed by a space and the JWT token",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Operations about products",
      "name": "Products"
    },
    {
      "description": "Catalog reading operations",
      "name": "Catalogs"
    },
    {
      "description": "Authentication operations",
      "name": "Authentication"
    }
  ],
  "x-extension-openapi": {
    "example": "value on a json level"
  }
}
